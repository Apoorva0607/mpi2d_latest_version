function m  = planeMesh(point, normalVector,varargin)
% m = sphereMesh(c,r)
% m = sphereMesh(c,r,options)
%
% creates a MeshType object of a sphere of radius r and center c
%
% options       meaning     default
% -------       -------     -------
%
% 's'           scale       1


s = 1; % half resolution for phi than for theta
opacity = 1;
color = [0 0 0];

% Argument reading

if (size(varargin,2)>0)
    i = 1;
    while (i <= size(varargin,2))
        if (strcmp( varargin{i} , 'color'))
                color=  varargin{i+1};
                i = i+1;
        elseif(strcmp( varargin{i} , 'opacity'))
                 opacity= varargin{i+1};
                 i = i+1;
        elseif(strcmp( varargin{i} , 's'))
                noplot = true;
        end
        i = i+1;
    end
end

   
% --------------------------
   
   
 numPts = phiResolution * resolution + 2; % phires * thetares +2
 numPolys = phiResolution *2* resolution;
  
   
   % Create plane
   
   [x y ]   =vtkMathPerpendiculars(normalVector,pi/2);
   
   points(:,1)=point-s/2*x-s/2*y;
   points(:,2)=point-s/2*x+s/2*y;
   points(:,4)=point+s/2*x-s/2*y;
   points(:,3)=point+s/2*x+s/2*y;
      
   % Create conectivity
   
        
   polygons = [1 2 3; 1 3 4];
   
   
   
   % band conectivity
   
   for i=2:(phiResolution-1);
     for j=1:(thetaResolution)
         
           % conectivity
           vertex1 = (i-2)*thetaResolution+j+1;
           vertex2 = cyclicNext(vertex1,[(i-2)*thetaResolution+2 (i-2)*thetaResolution+thetaResolution+1]);
           vertex3 = cyclicNext(vertex1+thetaResolution-1,[(i-1)*thetaResolution+2 (i-1)*thetaResolution+thetaResolution+1]);
           polygons = [polygons ; vertex1 vertex2 vertex3];
           
           vertex1 = (i-2)*thetaResolution+j+1;
           
           vertex3 = cyclicNext(vertex1+thetaResolution-1,[(i-1)*thetaResolution+2 (i-1)*thetaResolution+thetaResolution+1]);
           vertex2 = cyclicPrevious(vertex3,[(i-1)*thetaResolution+2 (i-1)*thetaResolution+thetaResolution+1]);
           polygons = [polygons ; vertex1 vertex2 vertex3];
           
           
           
      end
   end
   
   Rx = eye(3);
   Ry = eye(3);
   Rz = eye(3);
   
   if (rotatex~=0)
       Rx = [1 0 0
             0 cos(rotatex) -sin(rotatex)
             0 sin(rotatex) cos(rotatex)];
   end
   
   if (rotatey~=0)
       Ry = [cos(rotatey) 0 sin(rotatey)
           0 1 0
           -sin(rotatey) 0 cos(rotatey)];
   end
   
   if (rotatez~=0)
       Rz = [cos(rotatez) -sin(rotatez) 0
           sin(rotatez) cos(rotatez) 0
           0 0 1];
   end

   switch (rotationOrder)
       case 0
           M = Rz * Ry * Rx;
       case 1
           M = Rz * Rx * Ry;
   end
   
   for i=1:size(points,1)
           points(i,:) = (M * (points(i,:)'-c(:)) +c(:))';
   end
   

   
   
     
   % create mesh
   m = MeshType(size(points,1),size(polygons,1)); 
   m.points =points;
   m.triangles = polygons;
   
   
   % just for testing
%   vtkplotpoints(m.points,'pointSize',0.25); 
%    vtkplotpoints(m.points(2,:),'color',[1 0 0],'pointSize',0.25); 
%    vtkplotpoints(m.points(3,:),'color',[0 1 0],'pointSize',0.25); 
%    vtkplotpoints(m.points(6,:),'color',[0 0 1],'pointSize',0.25); 
   
%   viewMesh(m,'noplot')
%   vtkshow();vtkdestroy()
end


   function n = cyclicNext(a,b)
   global closed;
   % a index
   % b=[b1 b2] min and max index
  % if (a<b(1))
  %     a=b(1);
  % end
  
    
    n = a+1;
    if (n>b(2))
        if (closed)
            n = b(1);
        else
            n=a;
        end
    end
    
   end

   function n = cyclicPrevious(a,b)
   global closed;
   % a index
    
    n = a-1;
    if (n<b(1))
        if (closed)
            n = b(2);
        else
            n=a;
        end
    end
    
        
    
end