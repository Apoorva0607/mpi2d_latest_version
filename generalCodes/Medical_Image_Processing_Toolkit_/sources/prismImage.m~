% test_generateCone
function out = prismImage(roi_file, ref_im,varargin)
% generate a prism  from a roi, using the roi as base section and extruding
% along the normal to the roi plane

%% parameters
MAX_CHUNK_SIZE = 50;
MAX_CHUNK_SIZE = 50;
for i=1:size(varargin,2)
    if (strcmp(varargin{i},'debug'))
        dbg = true;
    elseif (strcmp(varargin{i},'skeletonize'))
        skeletonize_plane= true;
        i=i+1;
    elseif (strcmp(varargin{i},'maxChunkSize'))
        MAX_CHUNK_SIZE = varargin{i+1};
        i=i+1;
    end
    
end
out = ImageType(ref_im);
 th = sqrt(sum(ref_im.spacing.^2))/2;
npieces=1;


%% Read roi 
% ------------------------------------------- read roi

[roinormal roiorigin points] =  read_roi(roi_file);

roi.normal = roinormal;
roi.origin = roiorigin;

[x y]=vtkMathPerpendiculars(roi.normal,pi/2);

M=eye(4);
M(1:3,1:3) = [x(:) y(:) roi.normal(:)];
M(1:3,4) = roi.origin;


npoints = size(points,2);

%% The image will be filled in 
[x y z] = ndgrid(1:ref_im.size(1), 1:ref_im.size(2), 1:ref_im.size(3));
ref_positions = ref_im.GetPosition([x(:) y(:) z(:)]');
ref_positions_2D = M \ [ref_positions; ones(1,size(ref_positions,2))];

% The origin of the system is the centroid of the points
centroid = mean(points,2);
% make the triangles

for i=1:npoints-1
    % triangle i is defined by point i, point i+1 and centroid. Seee if the
    % ref positions are inside it
    A = points(1:2,i);
    B = points(1:2,i+1);
    
    pointsInside = PointInTriangle(ref_positions_2D(1:2,:), A,B,centroid(1:2));
    pointsInside = reshape(pointsInside,out.size'); 
    out.data(pointsInside>0)=1;
    
end

end



