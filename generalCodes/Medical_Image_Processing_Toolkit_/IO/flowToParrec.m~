function flowToParrec(filename,vectorImage, anatomyImage)
% vectorImage is an array of n images
% filename is the image prefix (no extension)



% parameters
phEnc=150;
maxInt = 2^12;
minInt=0;

nphases = numel(vectorImage);

fileRL=[filename '_RL']; % x
fileAP=[filename '_AP']; % y
fileFH=[filename '_FH']; % z


format = 'uint16';

%% Write rec files

datax=[];
datay=[];
dataz=[];
data=[];

for i=1:nphases
    % resample 
    out(i) = resampleImage(vectorImage(i),anatomyImage(i));
    
    datax = [datax; (out(i).datax(:)+phEnc)*(maxInt-minInt)/(2*phEnc)+minInt ];
    datay = [datay; (out(i).datay(:)+phEnc)*(maxInt-minInt)/(2*phEnc)+minInt];
    dataz = [dataz; (out(i).dataz(:)+phEnc)*(maxInt-minInt)/(2*phEnc)+minInt];
    data = [data; anatomyImage(i).data(:)];
end



pidx = fopen([ fileRL '.REC' ],'w');
if (pidx == -1),
    error('could not create file...');
end
fwrite(pidx,[ data ; datax],format); 
fclose(pidx);


pidy = fopen([ fileAP '.REC' ],'w');
if (pidy == -1),
    error('could not create file...');
end
fwrite(pidy,[ data;  datay],format); 
fclose(pidy);

pidz = fopen([ fileFH '.REC' ],'w');
if (pidz == -1),
    error('could not create file...');
end
fwrite(pidz,[data ; dataz],format); 
fclose(pidz);

%% Write par files

pidx = fopen([ fileRL '.PAR' ],'w');
if (pidx == -1),
    error('could not create file...');
end
write_par(pidx,nphases,[phEnc 0.0 0.0],out(1).size',vectorImage(1).origin',vectorImage(1).spacing')
fclose(pidx);

pidy = fopen([ fileAP '.PAR' ],'w');
if (pidx == -1),
    error('could not create file...');
end
write_par(pidy,nphases,[0.0 phEnc 0.0],vectorImage(1).size',vectorImage(1).origin',vectorImage(1).spacing')
fclose(pidy);

pidz = fopen([ fileFH '.PAR' ],'w');
if (pidz == -1),
    error('could not create file...');
end
write_par(pidz,nphases,[0.0 0.0 phEnc],vectorImage(1).size',vectorImage(1).origin',vectorImage(1).spacing')
fclose(pidz);

end

function write_par(pidx,nphases,phenc,imsize, origin,spacing)
nbits=16; % image pixel size in bits
nx=imsize(1);
ny=imsize(2);
nz=imsize(3);
echoTime=3.472169;

fprintf(pidx,'%s\n','# Automatically generated'); 
fprintf(pidx,'%s\n%s\n','# === GENERAL INFORMATION ========================================================','#'); 
fprintf(pidx,'%s\n','.    Patient name                       :   ReconFrame');
fprintf(pidx,'%s\n','.    Examination name                   :   ReconFrame');
fprintf(pidx,'%s\n','.    Protocol name                      :   ReconFrame');
fprintf(pidx,'%s\n','.    Examination date/time              :   2000.01.01 / 00:00:00');
fprintf(pidx,'%s\n','.    Series_data_type                   :   0');
fprintf(pidx,'%s\n','.    Acquisition nr                     :   1');
fprintf(pidx,'%s\n','.    Reconstruction nr                  :   1');
fprintf(pidx,'%s\n','.    Scan Duration [sec]                :   0.00');
fprintf(pidx,'%s%d\n','.    Max. number of cardiac phases      :   ',nphases);
fprintf(pidx,'%s\n','.    Max. number of echoes              :   1');
fprintf(pidx,'%s%d\n','.    Max. number of slices/locations    :   ',nz);
fprintf(pidx,'%s\n','.    Max. number of dynamics            :   1');
fprintf(pidx,'%s\n','.    Max. number of mixes               :   1');
fprintf(pidx,'%s\n','.    Patient Position                   :   HFS');
fprintf(pidx,'%s\n','.    Preparation direction              :   AP');
fprintf(pidx,'%s\n','.    Technique                          :   T1TFE');
fprintf(pidx,'%s   %d   %d\n','.    Scan resolution  (x, y)            :',nx,ny);
fprintf(pidx,'%s\n','.    Scan mode                          :   3D');
fprintf(pidx,'%s\n','.    Repetition time [msec]             :   3.62');
fprintf(pidx,'%s\n','.    FOV (ap,fh,rl) [mm]                :   300.00 93.60 300.00');
fprintf(pidx,'%s\n','.    Water Fat shift [pixels]           :   0.20');
fprintf(pidx,'%s\n','.    Angulation midslice(ap,fh,rl)[degr]:   0.00   0.00   0.00  ');
fprintf(pidx,'%s  %3.2f  %3.2f  %3.2f\n','.    Off Centre midslice(ap,fh,rl) [mm] :',origin(1),origin(2),origin(3));
fprintf(pidx,'%s\n','.    Flow compensation <0=no 1=yes> ?   :   0');
fprintf(pidx,'%s\n','.    Presaturation     <0=no 1=yes> ?   :   0');
fprintf(pidx,'%s  %3.2f  %3.2f  %3.2f\n','.    Phase encoding velocity [cm/sec]   :',phenc(1),phenc(2),phenc(3));
fprintf(pidx,'%s\n','.    MTC               <0=no 1=yes> ?   :   0');
fprintf(pidx,'%s\n','.    SPIR              <0=no 1=yes> ?   :   0');
fprintf(pidx,'%s\n','.    EPI factor        <0,1=no EPI>     :   1');
fprintf(pidx,'%s\n','.    Dynamic scan      <0=no 1=yes> ?   :   0');
fprintf(pidx,'%s\n','.    Diffusion         <0=no 1=yes> ?   :   0');
fprintf(pidx,'%s\n','.    Diffusion echo time [msec]         :   0.00');
fprintf(pidx,'%s\n','.    Max. number of diffusion values    :   1');
fprintf(pidx,'%s\n','.    Max. number of gradient orients    :   1');
fprintf(pidx,'%s\n','.    Number of label types   <0=no ASL> :   0');
fprintf(pidx,'%s\n','#');
fprintf(pidx,'%s\n','# === PIXEL VALUES =============================================================');
fprintf(pidx,'%s\n','#  PV = pixel value in REC file, FP = floating point value, DV = displayed value on console');
fprintf(pidx,'%s\n','#  RS = rescale slope,           RI = rescale intercept,    SS = scale slope');
fprintf(pidx,'%s\n','#  DV = PV * RS + RI             FP = PV /  SS');
fprintf(pidx,'%s\n','#');
fprintf(pidx,'%s\n','# === IMAGE INFORMATION ==========================================================');
fprintf(pidx,'%s\n','#  The rest of this file contains ONE line per image, this line contains the following information:');
fprintf(pidx,'%s\n','#');  
fprintf(pidx,'%s\n','#   slice number                             (integer)');
fprintf(pidx,'%s\n','#  echo number                              (integer)');
fprintf(pidx,'%s\n','#  dynamic scan number                      (integer)');
fprintf(pidx,'%s\n','#  cardiac phase number                     (integer)');
fprintf(pidx,'%s\n','#  image_type_mr                            (integer)');
fprintf(pidx,'%s\n','#  scanning sequence                        (integer)');
fprintf(pidx,'%s\n','#  index in REC file (in images)            (integer)');
fprintf(pidx,'%s\n','#  image pixel size (in bits)               (integer)');
fprintf(pidx,'%s\n','#  scan percentage                          (integer)');
fprintf(pidx,'%s\n','#  recon resolution (x,y)                   (2*integer)');
fprintf(pidx,'%s\n','#  rescale intercept                        (float)');
fprintf(pidx,'%s\n','#  rescale slope                            (float)');
fprintf(pidx,'%s\n','#  scale slope                              (float)');
fprintf(pidx,'%s\n','#  window center                            (integer)');
fprintf(pidx,'%s\n','#  window width                             (integer)');
fprintf(pidx,'%s\n','#  image angulation (ap,fh,rl in degrees )  (3*float)');
fprintf(pidx,'%s\n','#  image offcentre (ap,fh,rl in mm )        (3*float)');
fprintf(pidx,'%s\n','#  slice thickness                          (float)');
fprintf(pidx,'%s\n','#  slice gap                                (float)');
fprintf(pidx,'%s\n','#  image_display_orientation                (integer)');
fprintf(pidx,'%s\n','#  slice orientation ( TRA/SAG/COR )        (integer)');
fprintf(pidx,'%s\n','#  fmri_status_indication                   (integer)');
fprintf(pidx,'%s\n','#  image_type_ed_es  (end diast/end syst)   (integer)');
fprintf(pidx,'%s\n','#  pixel spacing (x,y) (in mm)              (2*float)');
fprintf(pidx,'%s\n','#  echo_time                                (float)');
fprintf(pidx,'%s\n','#  dyn_scan_begin_time                      (float)');
fprintf(pidx,'%s\n','#  trigger_time                             (float)');
fprintf(pidx,'%s\n','#  diffusion_b_factor                       (float)');
fprintf(pidx,'%s\n','#  number of averages                       (float)');
fprintf(pidx,'%s\n','#  image_flip_angle (in degrees)            (float)');
fprintf(pidx,'%s\n','#  cardiac frequency                        (integer)');
fprintf(pidx,'%s\n','#  min. RR. interval                        (integer)');
fprintf(pidx,'%s\n','#  max. RR. interval                        (integer)');
fprintf(pidx,'%s\n','#  turbo factor                             (integer)');
fprintf(pidx,'%s\n','#  inversion delay                          (float)');
fprintf(pidx,'%s\n','#  diffusion b value number    (imagekey!)  (integer)');
fprintf(pidx,'%s\n','#  gradient orientation number (imagekey!)  (integer)');
fprintf(pidx,'%s\n','#  contrast type                            (string)');
fprintf(pidx,'%s\n','#  diffusion anisotropy type                (string)');
fprintf(pidx,'%s\n','#  diffusion (ap, fh, rl)                   (3*float)');
fprintf(pidx,'%s\n','#  label type (ASL)            (imagekey!)  (integer)');
fprintf(pidx,'%s\n','#sl ec dyn ph ty  idx pix % rec size (re)scale     window       angulation      offcentre         thick  gap   info   spacing   echo  dtime ttime    diff avg  flip  freq RR_int  turbo  delay b grad cont anis diffusion');
index_rec=0;
rescale_intercept= 2.716763;
rescale_slope= 0.287341;
scale_slope= 3.472170;
window_center=591;
window_width =1118;
sliceThickness=2.34;
% anatomy
for ph=1:nphases
    for sliceNumber=1:nz
    
        %   slice number | echo number | dynamic scan number 
            fprintf(pidx,'%d    %d    %d    ',sliceNumber,1,1);
        %     cardiac phase number | image type mr| scanning secquence
            fprintf(pidx,'%d    %d    %d    ',ph,0,0);
       % index in REC file (in images) | image pixel size (in bits)   |  scan percentage
            fprintf(pidx,'%d    %d    %d    ',index_rec,nbits,100);
        % recon resolution | rescale intercept | rescale slope  | scale slope
            fprintf(pidx,'%d  %d    %f   %f  %f  ',nx,ny,rescale_intercept,rescale_slope, scale_slope);
         % window center |  window width 
            fprintf(pidx,'%d  %d  ', window_center , window_width );
        % image angulation
            fprintf(pidx,'%f  %f  %f  ', 0.00 , 0.00, 0.00) ;
        % image offcenter    | slice thickness | slice gap
         %fprintf(pidx,'%f  %f  %f %f    %f  ',8.238,  -2.911 + (sliceNumber-1)*spacing(3) ,  -4.943,  spacing(3), 0.0 );
         fprintf(pidx,'%f  %f  %f %f    %f  ',origin(1),  origin(2) + (sliceNumber-1)*spacing(3) ,  origin(3),  spacing(3), 0.0 );
         % image_display_orientation  | slice orientation | fmri_status_indication | image_type_ed_es  (end diast/end syst)
         fprintf(pidx,'%d  %d  %d   %d  ',0, 1, 0, 0);
         % pixel spacing (x,y) (in mm) 
         fprintf(pidx,'%f  %f   ',spacing(1),spacing(2));
         % echo_time |   dyn_scan_begin_time  |  trigger_time |  diffusion_b_factor | number of averages
         fprintf(pidx,'%f  %f  %f %f ',0.000, 0.000,  sliceNumber*33+2.0, 0.000000, 1.000000);
        %  image_flip_angle (in degrees) |  cardiac frequency | min. RR.  interval | max. RR. interval  
        fprintf(pidx,'%f  %d  %d  %d',5.0, 0, 0,0);
        %   turbo factor |  inversion delay  |  diffusion b value number |   gradient orientation number (imagekey!)
        fprintf(pidx,'%d  %f  %d  %d',2, 0.0, 1,0);
        % contrast type | diffusion anisotropy type
        fprintf(pidx,'%d  %d   ',0,0);
        % diffusion (ap, fh, rl)
        fprintf(pidx,'%f  %f     %f   ',0.000000, 0.000000 ,0.000000);
        % label
        fprintf(pidx,'%d\n',0);
         
         
         
            index_rec=index_rec+1;
         
    end
end
%phase
for ph=1:nphases
    for sliceNumber=1:nz
    
        %   slice number | echo number | dynamic scan number 
            fprintf(pidx,'%d    %d    %d    ',sliceNumber,1,1);
        %     cardiac phase number | image type mr| scanning secquence
            fprintf(pidx,'%d    %d    %d    ',ph,3,0);
       % index in REC file (in images) | image pixel size (in bits)   |  scan percentage
            fprintf(pidx,'%d    %d    %d    ',index_rec,nbits,100);
        % recon resolution | rescale intercept | rescale slope  | scale slope
            fprintf(pidx,'%d  %d    %f   %f  %f  ',nx,ny,rescale_intercept,rescale_slope, scale_slope);
         % window center |  window width 
            fprintf(pidx,'%d  %d  ', window_center , window_width );
        % image angulation
            fprintf(pidx,'%f  %f  %f  ', 0.00 , 0.00, 0.00) ;
        % image offcenter    | slice thickness | slice gap
         %fprintf(pidx,'%f  %f  %f %f    %f  ',8.238,  -2.911 + (sliceNumber-1)*spacing(3) ,  -4.943,  spacing(3), 0.0 );
         fprintf(pidx,'%f  %f  %f %f    %f  ',origin(1),  origin(2) + (sliceNumber-1)*spacing(3) ,  origin(3),  spacing(3), 0.0 );
         % image_display_orientation  | slice orientation | fmri_status_indication | image_type_ed_es  (end diast/end syst)
         fprintf(pidx,'%d  %d  %d   %d  ',0, 1, 0, 0);
         % pixel spacing (x,y) (in mm) 
         fprintf(pidx,'%f  %f   ',spacing(1),spacing(2));
         % echo_time |   dyn_scan_begin_time  |  trigger_time |  diffusion_b_factor | number of averages
         fprintf(pidx,'%f  %f  %f %f ',0.000, 0.000,  sliceNumber*33+2.0, 0.000000, 1.000000);
        %  image_flip_angle (in degrees) |  cardiac frequency | min. RR.  interval | max. RR. interval  
        fprintf(pidx,'%f  %d  %d  %d',5.0, 0, 0,0);
        %   turbo factor |  inversion delay  |  diffusion b value number |   gradient orientation number (imagekey!)
        fprintf(pidx,'%d  %f  %d  %d',2, 0.0, 1,0);
        % contrast type | diffusion anisotropy type
        fprintf(pidx,'%d  %d   ',0,0);
        % diffusion (ap, fh, rl)
        fprintf(pidx,'%f  %f     %f   ',0.000000, 0.000000 ,0.000000);
        % label
        fprintf(pidx,'%d\n',0);
         
         
         
            index_rec=index_rec+1;
         
    end
end
fprintf(pidx,'%s\n','# === END OF DATA DESCRIPTION FILE ===============================================');
fprintf(pidx,'%s\n','');


end